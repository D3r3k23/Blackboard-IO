
//////////////////////////////////////////////////////////////////////////////////
//               Module partially generated by Vivado IP packager               //
//////////////////////////////////////////////////////////////////////////////////

module blackboard_io_v1_0
#(
	// Parameters of Axi Slave Bus Interface S00_AXI
	parameter integer C_S00_AXI_DATA_WIDTH	= 32,
	parameter integer C_S00_AXI_ADDR_WIDTH	= 4
)(
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
        input wire          clk,
        input wire [11 : 0] sw,
        input wire [3  : 0] btn,

        output wire [9  :  0] led,
        output wire [11 : 10] led_R,
        output wire [11 : 10] led_G,
        output wire [11 : 10] led_B,

        output wire [3 : 0] sseg_an,
        output wire [7 : 0] sseg_cat,
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

	// Ports of Axi Slave Bus Interface S00_AXI
	input wire  s00_axi_aclk,
	input wire  s00_axi_aresetn,
	input wire [C_S00_AXI_ADDR_WIDTH-1 : 0] s00_axi_awaddr,
	input wire [2 : 0] s00_axi_awprot,
	input wire  s00_axi_awvalid,
	output wire  s00_axi_awready,
	input wire [C_S00_AXI_DATA_WIDTH-1 : 0] s00_axi_wdata,
	input wire [(C_S00_AXI_DATA_WIDTH/8)-1 : 0] s00_axi_wstrb,
	input wire  s00_axi_wvalid,
	output wire  s00_axi_wready,
	output wire [1 : 0] s00_axi_bresp,
	output wire  s00_axi_bvalid,
	input wire  s00_axi_bready,
	input wire [C_S00_AXI_ADDR_WIDTH-1 : 0] s00_axi_araddr,
	input wire [2 : 0] s00_axi_arprot,
	input wire  s00_axi_arvalid,
	output wire  s00_axi_arready,
	output wire [C_S00_AXI_DATA_WIDTH-1 : 0] s00_axi_rdata,
	output wire [1 : 0] s00_axi_rresp,
	output wire  s00_axi_rvalid,
	input wire  s00_axi_rready
);

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
    wire [11 : 0] SW_DATA;
    wire [3  : 0] BTN_DATA;
    wire [15 : 0] LED_CTRL;
    wire [21 : 0] SSEG_CTRL;
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

// Instantiation of Axi Bus Interface S00_AXI
blackboard_io_v1_0_S00_AXI # ( 
	.C_S_AXI_DATA_WIDTH(C_S00_AXI_DATA_WIDTH),
	.C_S_AXI_ADDR_WIDTH(C_S00_AXI_ADDR_WIDTH)
) blackboard_io_v1_0_S00_AXI_inst (
	.S_AXI_ACLK(s00_axi_aclk),
	.S_AXI_ARESETN(s00_axi_aresetn),
	.S_AXI_AWADDR(s00_axi_awaddr),
	.S_AXI_AWPROT(s00_axi_awprot),
	.S_AXI_AWVALID(s00_axi_awvalid),
	.S_AXI_AWREADY(s00_axi_awready),
	.S_AXI_WDATA(s00_axi_wdata),
	.S_AXI_WSTRB(s00_axi_wstrb),
	.S_AXI_WVALID(s00_axi_wvalid),
	.S_AXI_WREADY(s00_axi_wready),
	.S_AXI_BRESP(s00_axi_bresp),
	.S_AXI_BVALID(s00_axi_bvalid),
	.S_AXI_BREADY(s00_axi_bready),
	.S_AXI_ARADDR(s00_axi_araddr),
	.S_AXI_ARPROT(s00_axi_arprot),
	.S_AXI_ARVALID(s00_axi_arvalid),
	.S_AXI_ARREADY(s00_axi_arready),
	.S_AXI_RDATA(s00_axi_rdata),
	.S_AXI_RRESP(s00_axi_rresp),
	.S_AXI_RVALID(s00_axi_rvalid),
	.S_AXI_RREADY(s00_axi_rready),
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
        .SW_DATA   ( SW_DATA   ), // [11:0]
        .BTN_DATA  ( BTN_DATA  ), // [3:0]
        .LED_CTRL  ( LED_CTRL  ), // [15:13] RGB 11, [12:10] RGB 10, [9:0]: led
        .SSEG_CTRL ( SSEG_CTRL )  // [21:8] num, [7:4] dp_en, [3:0] dig_en
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
);

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
    assign SW_DATA  = sw[11 : 0];
    assign BTN_DATA = btn[3 : 0];

    assign led = LED_CTRL[9 : 0];

    assign led_R = { LED_CTRL[15], LED_CTRL[12] };
    assign led_G = { LED_CTRL[14], LED_CTRL[11] };
    assign led_B = { LED_CTRL[13], LED_CTRL[10] };

    sseg_controller sseg_controller_inst
    (
        .clk    ( clk               ),
        .dig_en ( SSEG_CTRL[3  : 0] ),
        .dp_en  ( SSEG_CTRL[7  : 4] ),
        .num    ( SSEG_CTRL[21 : 8] ),
        .an     ( sseg_an           ),
        .cat    ( sseg_cat          )
    );
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
endmodule
